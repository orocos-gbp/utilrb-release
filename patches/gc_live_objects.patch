--- gc.c	2006-08-25 10:12:46.000000000 +0200
+++ gc.c.new	2007-01-13 12:39:38.383681000 +0100
@@ -88,6 +88,8 @@ static void run_final();
 static VALUE nomem_error;
 static void garbage_collect();
 
+static unsigned long live_objects = 0;
+
 void
 rb_memerror()
 {
@@ -401,6 +398,7 @@ rb_newobj()
     RANY(obj)->file = ruby_sourcefile;
     RANY(obj)->line = ruby_sourceline;
 #endif
+    live_objects++;
     return obj;
 }
 
@@ -1053,8 +1051,8 @@ gc_sweep()
     RVALUE *p, *pend, *final_list;
     int freed = 0;
     int i;
-    unsigned long live = 0;
     unsigned long free_min = 0;
+    live_objects = 0;
 
     for (i = 0; i < heaps_used; i++) {
         free_min += heaps[i].limit;
@@ -1113,7 +1111,7 @@ gc_sweep()
 	    }
 	    else {
 		RBASIC(p)->flags &= ~FL_MARK;
-		live++;
+		live_objects++;
 	    }
 	    p++;
 	}
@@ -1131,7 +1129,7 @@ gc_sweep()
 	}
     }
     if (malloc_increase > malloc_limit) {
-	malloc_limit += (malloc_increase - malloc_limit) * (double)live / (live + freed);
+	malloc_limit += (malloc_increase - malloc_limit) * (double)live_objects / (live_objects + freed);
 	if (malloc_limit < GC_MALLOC_LIMIT) malloc_limit = GC_MALLOC_LIMIT;
     }
     malloc_increase = 0;
@@ -2003,6 +2001,15 @@ rb_obj_id(VALUE obj)
     return (VALUE)((long)obj|FIXNUM_FLAG);
 }
 
+/* call-seq:
+ *  GC.live_objects => number
+ *
+ * Returns the count of objects currently allocated
+ */
+static
+VALUE rb_gc_live_objects(VALUE self)
+{ return INT2FIX(live_objects); }
+
 /*
  *  The <code>GC</code> module provides an interface to Ruby's mark and
  *  sweep garbage collection mechanism. Some of the underlying methods
@@ -2027,6 +2034,7 @@ Init_GC()
     rb_define_module_function(rb_mObSpace, "remove_finalizer", rm_final, 1);
     rb_define_module_function(rb_mObSpace, "finalizers", finals, 0);
     rb_define_module_function(rb_mObSpace, "call_finalizer", call_final, 1);
+    rb_define_module_function(rb_mObSpace, "live_objects", rb_gc_live_objects, 0);
 
     rb_define_module_function(rb_mObSpace, "define_finalizer", define_final, -1);
     rb_define_module_function(rb_mObSpace, "undefine_finalizer", undefine_final, 1);
